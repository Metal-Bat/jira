# Generated by Django 5.0.4 on 2024-05-04 15:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="first name of user"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="last name of user"),
                ),
                ("show_contact_info", models.BooleanField(default=False, verbose_name="show user info to others")),
                (
                    "current_state",
                    models.CharField(
                        choices=[
                            ("BUSY", "Busy"),
                            ("IN_MEETING", "In Meeting"),
                            ("OFF_DUTY", "Off Duty"),
                            ("AVAILABLE", "Available"),
                        ],
                        default="AVAILABLE",
                        help_text="selecting this can help others when to contact you",
                        max_length=255,
                        verbose_name="current state of user",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True, null=True, upload_to="user_avatar", verbose_name="avatar image of user"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="user information to show to others"),
                ),
                (
                    "mobile",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="mobile number of user"),
                ),
                ("email", models.EmailField(blank=True, max_length=255, null=True, verbose_name="email of user")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
